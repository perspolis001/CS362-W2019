        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include "assert.h"
        -:    7:
        3:    8:void ASSERT(int test) {
        3:    9:    if (test) {
        3:   10:        printf ("TEST PASSED!\n");
        -:   11:        
        -:   12:    }
        -:   13:    else{
    #####:   14:        printf("TEST FAILED!\n");
        -:   15:        
        -:   16:    }
        3:   17:}
        -:   18:
        1:   19:int main () {
        1:   20:	int score = 0;
        -:   21:	struct gameState GameState;
        1:   22:    printf("\n*************Unit Test 1: scoreFor**************\n");
        1:   23:	GameState.handCount[0]=5;
        1:   24:        GameState.hand[0][0]= province;
        1:   25:        GameState.hand[0][1]=curse;
        1:   26:        GameState.hand[0][2]=estate;
        1:   27:        GameState.hand[0][3]=curse;
        1:   28:        GameState.hand[0][3]=duchy;
        -:   29:	
        1:   30:	score = scoreFor(0, &GameState);
        -:   31:	
        1:   32:	printf("\n**Validate score from hand:\n");
        1:   33:	printf("Estimated score from hand: 8\n ");
        1:   34:        printf("Actual score from hand: %d\n ", score);
        1:   35:	ASSERT(score==8);
        -:   36:	
        1:   37:	score=0;
        1:   38:	printf("\n**Validate score from discard:\n");
        1:   39:	GameState.handCount[0]=5;
        1:   40:        GameState.hand[0][0]=duchy;
        1:   41:        GameState.hand[0][1]=curse;
        1:   42:        GameState.hand[0][2]=estate;
        1:   43:        GameState.hand[0][3]=curse;
        1:   44:        GameState.hand[0][3]=great_hall;
        1:   45:	score = scoreFor(0, &GameState);
        -:   46:        
        1:   47:	printf("\n**Expected score from discard: 3\n ");
        1:   48:        printf("Actual score from discard: %d\n ", score);
        1:   49:	ASSERT(score==3);
        -:   50:	
        1:   51:	score=0;
        1:   52:        printf("\n**Validate score from deck:\n");
        1:   53:	GameState.handCount[0]=5;
        1:   54:        GameState.hand[0][0]=duchy;
        1:   55:        GameState.hand[0][1]=curse;
        1:   56:        GameState.hand[0][2]=estate;
        1:   57:        GameState.hand[0][3]=curse;
        1:   58:        GameState.hand[0][3]=gardens;
        1:   59:	score = scoreFor(0, &GameState);
        1:   60:        printf("Expected score from deck: 2\n ");
        1:   61:        printf("Actual score from deck: %d\n ", score);
        1:   62:	ASSERT(score==2);
        -:   63:
        -:   64:	
        -:   65:}
