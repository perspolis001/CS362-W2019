        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include "assert.h"
        -:    7:
        3:    8:void ASSERT(int test) {
        3:    9:    if (test) {
        3:   10:        printf ("TEST PASSED!\n");
        -:   11:       
        -:   12:    }
        -:   13:    else{
    #####:   14:        printf("TEST FAILED!\n");
        -:   15:       
        -:   16:    }
        3:   17:}
        -:   18:
        1:   19:int main () {
        -:   20:        struct gameState GameState;
        -:   21:
        1:   22:         int k[10] = {1,2,3,4,5,6,7,8,9,10};
        1:   23:	printf("***********Unit Test 4: BuyCard ************\n");
        -:   24:
        1:   25:	initializeGame(2, k, 2, &GameState);
        -:   26:
        1:   27:	GameState.numBuys = 0;
        1:   28:	printf("**Validate if player denied from buying when no buy left:\n");
        1:   29:	ASSERT(buyCard(5, &GameState)==-1);
        -:   30:
        1:   31:	GameState.numBuys = 5;
        1:   32:	GameState.coins=0;
        -:   33:
        1:   34:	printf("\n**Validate if player denied from buying when not enough coins:\n");
        1:   35:        ASSERT(buyCard(5, &GameState)==-1);
        -:   36:	
        1:   37:	GameState.coins=100;
        -:   38:
        1:   39:	printf("\n**Validate if player can make a purchase:\n");
        1:   40:	ASSERT(buyCard(5, &GameState)==0);
        -:   41:	
        -:   42:}	
