        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include "assert.h"
        -:    7:
        8:    8:void ASSERT(int test) {
        8:    9:    if (test) {
        7:   10:        printf ("TEST PASSED!\n");
        -:   11:        
        -:   12:    }
        -:   13:    else{
        1:   14:        printf("TEST FAILED!\n");
        -:   15:        
        -:   16:    }
        8:   17:}
        -:   18:
        1:   19:int main(){
        1:   20:	printf("\n*************Starting Card Test 1: Adventurer**************\n");
        -:   21:
        -:   22:int opponentHandCount,opponentDeckCount, numActions, handCount, deckCount, seed;
        -:   23:    struct gameState GameState;
        1:   24:    int k[10] = {minion, smithy, gardens, tribute, baron, adventurer, cutpurse, mine, embargo, outpost};
        1:   25:    seed = 10;
        1:   26:	initializeGame(2, k, seed, &GameState);
        1:   27:	 GameState.whoseTurn = 1;
        1:   28:    GameState.hand[1][0] = adventurer;
        1:   29:    GameState.deckCount[1] = 2;
        1:   30:    opponentDeckCount = GameState.deckCount[1];
        1:   31:    opponentHandCount = GameState.handCount[1];
        -:   32:    
        -:   33:
        1:   34:	GameState.whoseTurn = 0;
        -:   35:    
        1:   36:    GameState.hand[0][0] = adventurer;
        1:   37:    GameState.handCount[0]= 1;
        1:   38:    GameState.deck[0][0]=copper;
        1:   39:   GameState.deck[0][1]=copper;
        1:   40:    GameState.deckCount[0] = 2;
        1:   41:    numActions = GameState.numActions;
        1:   42:    deckCount = GameState.deckCount[0];
        1:   43:    handCount = GameState.handCount[0];
        1:   44:	 int cardReturnValue = cardEffect(adventurer, 1, 1, 1, &GameState, handCount, NULL);
        1:   45:	int adventureFunctionReturn = adventurerCard(&GameState);
        1:   46:	printf("**Validate 2 cards added to players hand:\n");
        1:   47:	ASSERT((handCount + 2) == GameState.handCount[0]);
        1:   48:	printf("\n**Validate number of actions didn't change:\n");
        1:   49:	ASSERT(numActions == GameState.numActions);
        1:   50:	printf("\n**Validate the deck decreased by 3 cards:\n");
        1:   51:	ASSERT(deckCount > fullDeckCount(0,0, &GameState));
        1:   52:	printf("\n**Validate the opponent's handcount didn't change:\n");
        1:   53:	ASSERT(opponentHandCount == GameState.handCount[1]);
        1:   54:	printf("\n**Validate the  opponent's deckCount didn't change:\n");
        1:   55:	ASSERT(opponentDeckCount == GameState.deckCount[1]);
        1:   56:	printf("\n**Validate first card is a treasure\n");
        1:   57:	ASSERT(GameState.hand[0][2] == copper && GameState.hand[0][1] == copper);
        1:   58:	printf("\n** Validate card return value didn't change\n");
        1:   59:	ASSERT(cardReturnValue ==0);
        1:   60:	printf("\n**Validate if cardEffect and refactoredAdventurer return the same value\n");
        1:   61:	ASSERT(cardReturnValue == adventureFunctionReturn);
        -:   62:
        -:   63:
        -:   64:	
        -:   65:}
