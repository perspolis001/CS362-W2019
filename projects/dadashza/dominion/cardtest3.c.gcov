        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include "assert.h"
        -:    7:
        6:    8:void ASSERT(int test) {
        6:    9:    if (test) {
        5:   10:        printf ("TEST PASSED!\n");
        -:   11:    }
        -:   12:    else{
        1:   13:        printf("TEST FAILED!\n");
        -:   14:    }
        6:   15:}
        -:   16:
        1:   17:int main () {
        1:   18:    printf("\n*************Starting Card Test 3: Village**************\n");
        -:   19:    
        -:   20:    
        -:   21:    int opponentHandCount,opponentDeckCount, numActions, handCount, deckCount, seed;
        -:   22:    struct gameState GameState;
        1:   23:    int k[10] = {minion, smithy, gardens, tribute, baron, adventurer, cutpurse, mine, embargo, outpost};
        1:   24:    seed = 10;
        1:   25:    initializeGame(2, k, seed, &GameState);
        -:   26:    
        -:   27:    
        1:   28:    GameState.whoseTurn = 1;
        1:   29:    GameState.hand[1][0] = village;
        1:   30:    GameState.deckCount[1] = 3;
        1:   31:    opponentDeckCount = GameState.deckCount[1];
        1:   32:    opponentHandCount = GameState.handCount[1];
        -:   33:    
        1:   34:    GameState.whoseTurn = 0;
        -:   35:    
        1:   36:    GameState.hand[0][0] = village;
        -:   37:    
        1:   38:    GameState.deckCount[0] = 3;
        -:   39:    
        -:   40:    
        -:   41:    
        1:   42:    numActions = GameState.numActions;
        1:   43:    deckCount = GameState.deckCount[0];
        1:   44:    handCount = GameState.handCount[0];
        -:   45:    
        1:   46:    int cardReturnValue =  cardEffect(village, 1, 1, 1, &GameState, handCount, NULL);
        1:   47:	printf("**Validate the handcount increased by 1 cards:\n");
        1:   48:	ASSERT(handCount == GameState.handCount[0]);
        1:   49:	printf("\n**Validate the number of actions increased by 2:\n");
        1:   50:	ASSERT(numActions + 2 == GameState.numActions);
        1:   51:	printf("\n**Validate the deck decreased by 1 cards:\n");
        1:   52:	ASSERT(deckCount - 1 == GameState.deckCount[0]);
        1:   53:	 printf("\n**Validate opponent's deckCount didn't change:\n");
        1:   54:	ASSERT(opponentDeckCount == GameState.deckCount[1]);
        1:   55:	printf("\n**Validate opponent's hand count didn't change:\n");
        1:   56:	ASSERT(opponentHandCount == GameState.handCount[1]);
        1:   57:	printf("\n**Validate card return value is correct:\n");
        1:   58:	ASSERT(cardReturnValue ==0);
        -:   59:}
