        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include "assert.h"
        -:    7:
        2:    8:void ASSERT(int test) {
        2:    9:    if (test) {
        2:   10:        printf ("TEST PASSED!\n");
        -:   11:        
        -:   12:    }
        -:   13:    else{
    #####:   14:        printf("TEST FAILED!\n");
        -:   15:        
        -:   16:    }
        2:   17:}
        -:   18:
        1:   19:int main () {
        -:   20:	struct gameState GameState;
        1:   21:	printf("\n******Unit Test 2: shuffle******\n");
        -:   22:
        1:   23:        GameState.deckCount[0]=3;
        1:   24:        GameState.deck[0][0]= copper;
        1:   25:        GameState.deck[0][1]= silver;
        1:   26:        GameState.deck[0][2]= gold;
        -:   27:
        1:   28:	printf("\n**Validate if the function will give correct output numbers from the input numbers\n");
        1:   29:        ASSERT(shuffle(0, &GameState) == 0);
        -:   30:
        1:   31:	int cards[MAX_DECK]= {0};
        -:   32:        int i;
        4:   33:	for(i=0; i < 3; i++)
        -:   34:        {
        3:   35:                cards[GameState.deck[0][i]]=1;
        -:   36:        }
        -:   37:
        1:   38:	printf("\n**Validate that the cards are all still there\n");
        1:   39:	ASSERT(cards[copper] && cards[silver] && cards[gold]);
        -:   40:
        -:   41:	
        -:   42:}
