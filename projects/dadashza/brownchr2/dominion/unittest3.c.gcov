        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include "assert.h"
        -:    7:
        3:    8:void ASSERT(int test) {
        3:    9:    if (test) {
        3:   10:        printf ("TEST PASSED!\n");
        -:   11:
        -:   12:    }
        -:   13:    else{
    #####:   14:        printf("TEST FAILED!\n");
        -:   15:
        -:   16:    }
        3:   17:}
        -:   18:
        1:   19:int main () {
        -:   20:        struct gameState GameState;
        -:   21:
        1:   22:         int k[10] = {1,2,3,4,5,6,7,8,9,10};
        -:   23:
        1:   24:        initializeGame(2, k, 2, &GameState);
        1:   25:        GameState.supplyCount[province] = 5;
        1:   26:        printf("\n*********Unit Test 3: isGameOver**********\n");
        1:   27:        printf("\n**Validate if the game won't end if player has province\n");
        1:   28:        ASSERT(isGameOver(&GameState)==0);
        -:   29:
        1:   30:        GameState.supplyCount[province] = 0;
        1:   31:        printf("\n**Validate if the game will end when no province left\n");
        1:   32:        ASSERT(isGameOver(&GameState)==1);
        -:   33:
        1:   34:        GameState.supplyCount[0] = 0;
        1:   35:        GameState.supplyCount[1] = 0;
        1:   36:        GameState.supplyCount[1] = 0;
        1:   37:        printf("\n**Validate if the game will end if supply pile are at 0\n");
        1:   38:        ASSERT(isGameOver(&GameState)==1);
        -:   39:
        -:   40:
        -:   41:}
        -:   42:
