********Random Test Adventurer********
0 correct numbers of card were added to player's hand  and 50 wrong number of cards were added.

50 correct numbers of card were added to opponent's hand  and 0 wrong number of cards were added.

50 correct numbers of deck count opponent's hand  and 0 wrong number of deck count.

There were 0 successful adventurer card plays, and 50 failures [out of 50 games]

Function 'playCouncilRoom'
Lines executed:0.00% of 10
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playGreatHall'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'playVillage'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'playSmithy'
Lines executed:0.00% of 6
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 3

Function 'playAdventurer'
Lines executed:94.44% of 18
Branches executed:100.00% of 12
Taken at least once:75.00% of 12
Calls executed:66.67% of 3

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:3.74% of 214
Branches executed:12.85% of 179
Taken at least once:1.12% of 179
Calls executed:3.45% of 58

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:89.13% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:21.50% of 572
Branches executed:24.70% of 417
Taken at least once:16.55% of 417
Calls executed:11.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:void playAdventurer(struct gameState*);
        -:   10:void playSmithy(int, struct gameState*);
        -:   11:void playVillage(int, struct gameState*);
        -:   12:void playGreatHall(int, struct gameState*);
        -:   13:void playCouncilRoom(int, struct gameState*);
        -:   14:
function compare called 870 returned 100% blocks executed 83%
      870:   15:int compare(const void *a, const void *b) {
      870:   16:    if (*(int *) a > *(int *) b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   17:        return 1;
      870:   18:    if (*(int *) a < *(int *) b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      232:   19:        return -1;
      638:   20:    return 0;
        -:   21:}
        -:   22:
function newGame called 0 returned 0% blocks executed 0%
    #####:   23:struct gameState *newGame() {
    #####:   24:    struct gameState *g = malloc(sizeof(struct gameState));
    #####:   25:    return g;
        -:   26:}
        -:   27:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   28:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:                  int k8, int k9, int k10) {
    #####:   30:    int *k = malloc(10 * sizeof(int));
    #####:   31:    k[0] = k1;
    #####:   32:    k[1] = k2;
    #####:   33:    k[2] = k3;
    #####:   34:    k[3] = k4;
    #####:   35:    k[4] = k5;
    #####:   36:    k[5] = k6;
    #####:   37:    k[6] = k7;
    #####:   38:    k[7] = k8;
    #####:   39:    k[8] = k9;
    #####:   40:    k[9] = k10;
    #####:   41:    return k;
        -:   42:}
        -:   43:
function initializeGame called 50 returned 100% blocks executed 95%
       50:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:                   struct gameState *state) {
        -:   46:    
        -:   47:    int i;
        -:   48:    int j;
        -:   49:    int it;
        -:   50:   
       50:   51:    SelectStream(1);
call    0 returned 100%
       50:   52:    PutSeed((long) randomSeed);
call    0 returned 100%
        -:   53:    
        -:   54:    
       50:   55:    if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 56% (fallthrough)
branch  3 taken 44%
       28:   56:        return -1;
        -:   57:    }
        -:   58:    
        -:   59:    
       22:   60:    state->numPlayers = numPlayers;
        -:   61:    
        -:   62:    
      242:   63:    for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2420:   64:        for (j = 0; j < 10; j++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2200:   65:            if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   66:                return -1;
        -:   67:            }
        -:   68:        }
        -:   69:    }
        -:   70:    
        -:   71:    
        -:   72:    
       22:   73:    if (numPlayers == 2) {
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        8:   74:        state->supplyCount[curse] = 10;
       14:   75:    } else if (numPlayers == 3) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       14:   76:        state->supplyCount[curse] = 20;
        -:   77:    } else {
    #####:   78:        state->supplyCount[curse] = 30;
        -:   79:    }
        -:   80:    
        -:   81:    
       22:   82:    if (numPlayers == 2) {
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        8:   83:        state->supplyCount[estate] = 8;
        8:   84:        state->supplyCount[duchy] = 8;
        8:   85:        state->supplyCount[province] = 8;
        -:   86:    } else {
       14:   87:        state->supplyCount[estate] = 12;
       14:   88:        state->supplyCount[duchy] = 12;
       14:   89:        state->supplyCount[province] = 12;
        -:   90:    }
        -:   91:    
        -:   92:    
       22:   93:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       22:   94:    state->supplyCount[silver] = 40;
       22:   95:    state->supplyCount[gold] = 30;
        -:   96:    
        -:   97:    
      462:   98:    for (i = adventurer; i <= treasure_map; i++)        //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:   99:    {
     3630:  100:        for (j = 0; j < 10; j++)                //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  101:        {
     3410:  102:            if (kingdomCards[j] == i) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  103:                
      220:  104:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
       44:  105:                    if (numPlayers == 2) {
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        8:  106:                        state->supplyCount[i] = 8;
       14:  107:                    } else { state->supplyCount[i] = 12; }
        -:  108:                } else {
      198:  109:                    state->supplyCount[i] = 10;
        -:  110:                }
      220:  111:                break;
        -:  112:            } else    //card is not in the set choosen for the game
        -:  113:            {
     3190:  114:                state->supplyCount[i] = -1;
        -:  115:            }
        -:  116:        }
        -:  117:        
        -:  118:    }
        -:  119:    
        -:  120:    
       80:  121:    for (i = 0; i < numPlayers; i++) {
branch  0 taken 73%
branch  1 taken 28% (fallthrough)
       58:  122:        state->deckCount[i] = 0;
      232:  123:        for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      174:  124:            state->deck[i][j] = estate;
      174:  125:            state->deckCount[i]++;
        -:  126:        }
      464:  127:        for (j = 3; j < 10; j++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
      406:  128:            state->deck[i][j] = copper;
      406:  129:            state->deckCount[i]++;
        -:  130:        }
        -:  131:    }
        -:  132:    
        -:  133:    
       80:  134:    for (i = 0; i < numPlayers; i++) {
branch  0 taken 73%
branch  1 taken 28% (fallthrough)
       58:  135:        if (shuffle(i, state) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  136:            return -1;
        -:  137:        }
        -:  138:    }
        -:  139:    
        -:  140:    
       80:  141:    for (i = 0; i < numPlayers; i++) {
branch  0 taken 73%
branch  1 taken 28% (fallthrough)
        -:  142:        
       58:  143:        state->handCount[i] = 0;
       58:  144:        state->discardCount[i] = 0;
        -:  145:       
        -:  146:    }
        -:  147:    
        -:  148:    
      616:  149:    for (i = 0; i <= treasure_map; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      594:  150:        state->embargoTokens[i] = 0;
        -:  151:    }
        -:  152:    
        -:  153:    
       22:  154:    state->outpostPlayed = 0;
       22:  155:    state->phase = 0;
       22:  156:    state->numActions = 1;
       22:  157:    state->numBuys = 1;
       22:  158:    state->playedCardCount = 0;
       22:  159:    state->whoseTurn = 0;
       22:  160:    state->handCount[state->whoseTurn] = 0;
        -:  161:    
      132:  162:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      110:  163:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  164:    }
        -:  165:    
       22:  166:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  167:    
       22:  168:    return 0;
        -:  169:}
        -:  170:
function shuffle called 58 returned 100% blocks executed 94%
       58:  171:int shuffle(int player, struct gameState *state) {
        -:  172:    
        -:  173:    
        -:  174:    int newDeck[MAX_DECK];
       58:  175:    int newDeckPos = 0;
        -:  176:    int card;
        -:  177:    int i;
        -:  178:    
       58:  179:    if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  180:        return -1;
       58:  181:    qsort((void *) (state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  182:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  183:    
      696:  184:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      580:  185:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      580:  186:        newDeck[newDeckPos] = state->deck[player][card];
      580:  187:        newDeckPos++;
     1877:  188:        for (i = card; i < state->deckCount[player] - 1; i++) {
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
     1297:  189:            state->deck[player][i] = state->deck[player][i + 1];
        -:  190:        }
      580:  191:        state->deckCount[player]--;
        -:  192:    }
      638:  193:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      580:  194:        state->deck[player][i] = newDeck[i];
      580:  195:        state->deckCount[player]++;
        -:  196:    }
        -:  197:    
       58:  198:    return 0;
        -:  199:}
        -:  200:
function playCard called 0 returned 0% blocks executed 0%
    #####:  201:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {
        -:  202:    int card;
    #####:  203:    int coin_bonus = 0;        //tracks coins gain from actions
        -:  204:    
        -:  205:    
    #####:  206:    if (state->phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  207:        return -1;
        -:  208:    }
        -:  209:    
        -:  210:    
    #####:  211:    if (state->numActions < 1) {
branch  0 never executed
branch  1 never executed
    #####:  212:        return -1;
        -:  213:    }
        -:  214:    
        -:  215:    
    #####:  216:    card = handCard(handPos, state);
call    0 never executed
        -:  217:    
        -:  218:    
    #####:  219:    if (card < adventurer || card > treasure_map) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  220:        return -1;
        -:  221:    }
        -:  222:    
        -:  223:    
    #####:  224:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  225:        return -1;
        -:  226:    }
        -:  227:    
        -:  228:    
    #####:  229:    state->numActions--;
        -:  230:    
        -:  231:    
    #####:  232:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  233:    
    #####:  234:    return 0;
        -:  235:}
        -:  236:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  237:int buyCard(int supplyPos, struct gameState *state) {
        -:  238:    int who;
        -:  239:    if (DEBUG) {
        -:  240:        printf("Entering buyCard...\n");
        -:  241:    }
        -:  242:    
        -:  243:    
        -:  244:    
    #####:  245:    who = state->whoseTurn;
        -:  246:    
    #####:  247:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  248:        if (DEBUG)
        -:  249:            printf("You do not have any buys left\n");
    #####:  250:        return -1;
    #####:  251:    } else if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  252:        if (DEBUG)
        -:  253:            printf("There are not any of that type of card left\n");
    #####:  254:        return -1;
    #####:  255:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  256:        if (DEBUG)
        -:  257:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  258:        return -1;
        -:  259:    } else {
    #####:  260:        state->phase = 1;
        -:  261:        
    #####:  262:        gainCard(supplyPos, state, 0,
call    0 never executed
        -:  263:                 who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  264:        
    #####:  265:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  266:        state->numBuys--;
        -:  267:        if (DEBUG)
        -:  268:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos,
        -:  269:                   getCost(supplyPos), state->numBuys, state->coins);
        -:  270:    }
        -:  271:    
        -:  272:    
        -:  273:    
    #####:  274:    return 0;
        -:  275:}
        -:  276:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  277:int numHandCards(struct gameState *state) {
    #####:  278:    return state->handCount[whoseTurn(state)];
call    0 never executed
        -:  279:}
        -:  280:
function handCard called 0 returned 0% blocks executed 0%
    #####:  281:int handCard(int handPos, struct gameState *state) {
    #####:  282:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  283:    return state->hand[currentPlayer][handPos];
        -:  284:}
        -:  285:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  286:int supplyCount(int card, struct gameState *state) {
    #####:  287:    return state->supplyCount[card];
        -:  288:}
        -:  289:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  290:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  291:    int i;
    #####:  292:    int count = 0;
        -:  293:    
    #####:  294:    for (i = 0; i < state->deckCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  295:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  296:    }
        -:  297:    
    #####:  298:    for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  299:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  300:    }
        -:  301:    
    #####:  302:    for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  303:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  304:    }
        -:  305:    
    #####:  306:    return count;
        -:  307:}
        -:  308:
function whoseTurn called 100 returned 100% blocks executed 100%
      100:  309:int whoseTurn(struct gameState *state) {
      100:  310:    return state->whoseTurn;
        -:  311:}
        -:  312:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  313:int endTurn(struct gameState *state) {
        -:  314:    int k;
        -:  315:    int i;
    #####:  316:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  317:    
        -:  318:    
    #####:  319:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  320:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  321:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  322:    }
    #####:  323:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  324:    
        -:  325:    
    #####:  326:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  327:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  328:    } else {
    #####:  329:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  330:    }
        -:  331:    
    #####:  332:    state->outpostPlayed = 0;
    #####:  333:    state->phase = 0;
    #####:  334:    state->numActions = 1;
    #####:  335:    state->coins = 0;
    #####:  336:    state->numBuys = 1;
    #####:  337:    state->playedCardCount = 0;
    #####:  338:    state->handCount[state->whoseTurn] = 0;
        -:  339:    
        -:  340:    
    #####:  341:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  342:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  343:    }
        -:  344:    
        -:  345:    
    #####:  346:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  347:    
    #####:  348:    return 0;
        -:  349:}
        -:  350:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  351:int isGameOver(struct gameState *state) {
        -:  352:    int i;
        -:  353:    int j;
        -:  354:    
        -:  355:    
    #####:  356:    if (state->supplyCount[province] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  357:        return 1;
        -:  358:    }
        -:  359:    
        -:  360:    
    #####:  361:    j = 0;
    #####:  362:    for (i = 0; i < 25; i++) {
branch  0 never executed
branch  1 never executed
    #####:  363:        if (state->supplyCount[i] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  364:            j++;
        -:  365:        }
        -:  366:    }
    #####:  367:    if (j >= 3) {
branch  0 never executed
branch  1 never executed
    #####:  368:        return 1;
        -:  369:    }
        -:  370:    
    #####:  371:    return 0;
        -:  372:}
        -:  373:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  374:int scoreFor(int player, struct gameState *state) {
        -:  375:    
        -:  376:    int i;
    #####:  377:    int score = 0;
        -:  378:    
    #####:  379:    for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  380:        if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  381:        if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  382:        if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  383:        if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  384:        if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  385:        if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  386:    }
        -:  387:    
        -:  388:    
    #####:  389:    for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  390:        if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  391:        if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  392:        if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  393:        if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  394:        if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  395:        if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  396:    }
        -:  397:    
        -:  398:    
    #####:  399:    for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  400:        if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  401:        if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  402:        if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  403:        if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  404:        if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  405:        if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  406:    }
        -:  407:    
    #####:  408:    return score;
        -:  409:}
        -:  410:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  411:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  412:    int i;
        -:  413:    int j;
        -:  414:    int highScore;
        -:  415:    int currentPlayer;
        -:  416:    
        -:  417:    
    #####:  418:    for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
        -:  419:        
    #####:  420:        if (i >= state->numPlayers) {
branch  0 never executed
branch  1 never executed
    #####:  421:            players[i] = -9999;
        -:  422:        } else {
    #####:  423:            players[i] = scoreFor(i, state);
call    0 never executed
        -:  424:        }
        -:  425:    }
        -:  426:    
        -:  427:    
    #####:  428:    j = 0;
    #####:  429:    for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  430:        if (players[i] > players[j]) {
branch  0 never executed
branch  1 never executed
    #####:  431:            j = i;
        -:  432:        }
        -:  433:    }
    #####:  434:    highScore = players[j];
        -:  435:    
        -:  436:    
    #####:  437:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  438:    for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  439:        if (players[i] == highScore && i > currentPlayer) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  440:            players[i]++;
        -:  441:        }
        -:  442:    }
        -:  443:    
        -:  444:    
    #####:  445:    j = 0;
    #####:  446:    for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  447:        if (players[i] > players[j]) {
branch  0 never executed
branch  1 never executed
    #####:  448:            j = i;
        -:  449:        }
        -:  450:    }
    #####:  451:    highScore = players[j];
        -:  452:    
        -:  453:    
    #####:  454:    for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  455:        if (players[i] == highScore) {
branch  0 never executed
branch  1 never executed
    #####:  456:            players[i] = 1;
        -:  457:        } else {
    #####:  458:            players[i] = 0;
        -:  459:        }
        -:  460:    }
        -:  461:    
    #####:  462:    return 0;
        -:  463:}
        -:  464:
function drawCard called 13814 returned 100% blocks executed 38%
    13814:  465:int drawCard(int player, struct gameState *state) {
        -:  466:    int count;
        -:  467:    int deckCounter;
    13814:  468:    if (state->deckCount[player] <= 0) {//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  469:        
        -:  470:        
        -:  471:        int i;
        -:  472:        
    #####:  473:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  474:            state->deck[player][i] = state->discard[player][i];
    #####:  475:            state->discard[player][i] = -1;
        -:  476:        }
        -:  477:        
    #####:  478:        state->deckCount[player] = state->discardCount[player];
    #####:  479:        state->discardCount[player] = 0;//Reset discard
        -:  480:        
        -:  481:        
    #####:  482:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  483:        
        -:  484:        if (DEBUG) {//Debug statements
        -:  485:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  486:        }
        -:  487:        
    #####:  488:        state->discardCount[player] = 0;
        -:  489:        
        -:  490:        
    #####:  491:        count = state->handCount[player];//Get current player's hand count
        -:  492:        
        -:  493:        if (DEBUG) {//Debug statements
        -:  494:            printf("Current hand count: %d\n", count);
        -:  495:        }
        -:  496:        
    #####:  497:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  498:        
    #####:  499:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  500:            return -1;
        -:  501:        
    #####:  502:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  503:        state->deckCount[player]--;
    #####:  504:        state->handCount[player]++;//Increment hand count
        -:  505:    } else {
    13814:  506:        int count = state->handCount[player];//Get current hand count for player
        -:  507:        int deckCounter;
        -:  508:        if (DEBUG) {//Debug statements
        -:  509:            printf("Current hand count: %d\n", count);
        -:  510:        }
        -:  511:        
    13814:  512:        deckCounter = state->deckCount[player];//Create holder for the deck count
    13814:  513:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    13814:  514:        state->deckCount[player]--;
    13814:  515:        state->handCount[player]++;//Increment hand count
        -:  516:    }
        -:  517:    
    13814:  518:    return 0;
        -:  519:}
        -:  520:
function getCost called 0 returned 0% blocks executed 0%
    #####:  521:int getCost(int cardNumber) {
    #####:  522:    switch (cardNumber) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  523:        case curse:
    #####:  524:            return 0;
        -:  525:        case estate:
    #####:  526:            return 2;
        -:  527:        case duchy:
    #####:  528:            return 5;
        -:  529:        case province:
    #####:  530:            return 8;
        -:  531:        case copper:
    #####:  532:            return 0;
        -:  533:        case silver:
    #####:  534:            return 3;
        -:  535:        case gold:
    #####:  536:            return 6;
        -:  537:        case adventurer:
    #####:  538:            return 6;
        -:  539:        case council_room:
    #####:  540:            return 5;
        -:  541:        case feast:
    #####:  542:            return 4;
        -:  543:        case gardens:
    #####:  544:            return 4;
        -:  545:        case mine:
    #####:  546:            return 5;
        -:  547:        case remodel:
    #####:  548:            return 4;
        -:  549:        case smithy:
    #####:  550:            return 4;
        -:  551:        case village:
    #####:  552:            return 3;
        -:  553:        case baron:
    #####:  554:            return 4;
        -:  555:        case great_hall:
    #####:  556:            return 3;
        -:  557:        case minion:
    #####:  558:            return 5;
        -:  559:        case steward:
    #####:  560:            return 3;
        -:  561:        case tribute:
    #####:  562:            return 5;
        -:  563:        case ambassador:
    #####:  564:            return 3;
        -:  565:        case cutpurse:
    #####:  566:            return 4;
        -:  567:        case embargo:
    #####:  568:            return 2;
        -:  569:        case outpost:
    #####:  570:            return 5;
        -:  571:        case salvager:
    #####:  572:            return 4;
        -:  573:        case sea_hag:
    #####:  574:            return 4;
        -:  575:        case treasure_map:
    #####:  576:            return 4;
        -:  577:    }
        -:  578:    
    #####:  579:    return -1;
        -:  580:}
        -:  581:
function cardEffect called 50 returned 100% blocks executed 3%
       50:  582:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  583:    int i;
        -:  584:    int j;
        -:  585:    int k;
        -:  586:    int x;
        -:  587:    int index;
       50:  588:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
       50:  589:    int nextPlayer = currentPlayer + 1;
        -:  590:    
       50:  591:    int tributeRevealedCards[2] = {-1, -1};
        -:  592:    int temphand[MAX_HAND];// moved above the if statement
        -:  593:    //int drawntreasure = 0;
        -:  594:    //int z = 0;// this is the counter for the temp hand
       50:  595:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  596:        nextPlayer = 0;
        -:  597:    }
        -:  598:    
        -:  599:    
        -:  600:   
       50:  601:    switch (card) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  602:        case adventurer:
       50:  603:            playAdventurer(state);
call    0 returned 100%
       50:  604:            return 0;
        -:  605:            
        -:  606:        case council_room:
    #####:  607:            playCouncilRoom(handPos, state);
call    0 never executed
    #####:  608:            return 0;
        -:  609:            
        -:  610:        case feast:
        -:  611:            
    #####:  612:            for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  613:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  614:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  615:            }
        -:  616:            
    #####:  617:            updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  618:            x = 1;//Condition to loop on
    #####:  619:            while (x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  620:                if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  621:                    if (DEBUG)
        -:  622:                        printf("None of that card left, sorry!\n");
        -:  623:                    
        -:  624:                    if (DEBUG) {
        -:  625:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  626:                    }
    #####:  627:                } else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  628:                    printf("That card is too expensive!\n");
call    0 never executed
        -:  629:                    
        -:  630:                    if (DEBUG) {
        -:  631:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  632:                    }
        -:  633:                } else {
        -:  634:                    
        -:  635:                    if (DEBUG) {
        -:  636:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  637:                               state->discardCount[currentPlayer]);
        -:  638:                    }
        -:  639:                    
    #####:  640:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  641:                    x = 0;//No more buying cards
        -:  642:                    
        -:  643:                    if (DEBUG) {
        -:  644:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  645:                               state->discardCount[currentPlayer]);
        -:  646:                    }
        -:  647:                    
        -:  648:                }
        -:  649:            }
        -:  650:            
        -:  651:            
    #####:  652:            for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  653:                state->hand[currentPlayer][i] = temphand[i];
    #####:  654:                temphand[i] = -1;
        -:  655:            }
        -:  656:            
        -:  657:            
    #####:  658:            return 0;
        -:  659:            
        -:  660:        case gardens:
    #####:  661:            return -1;
        -:  662:            
        -:  663:        case mine:
    #####:  664:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  665:            
    #####:  666:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  667:                return -1;
        -:  668:            }
        -:  669:            
    #####:  670:            if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  671:                return -1;
        -:  672:            }
        -:  673:            
    #####:  674:            if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  675:                return -1;
        -:  676:            }
        -:  677:            
    #####:  678:            gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  679:            
        -:  680:            
    #####:  681:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  682:            
        -:  683:            
    #####:  684:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  685:                if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  686:                    discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  687:                    break;
        -:  688:                }
        -:  689:            }
        -:  690:            
    #####:  691:            return 0;
        -:  692:            
        -:  693:        case remodel:
    #####:  694:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  695:            
    #####:  696:            if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  697:                return -1;
        -:  698:            }
        -:  699:            
    #####:  700:            gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  701:            
        -:  702:            
    #####:  703:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  704:            
        -:  705:            
    #####:  706:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  707:                if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  708:                    discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  709:                    break;
        -:  710:                }
        -:  711:            }
        -:  712:            
        -:  713:            
    #####:  714:            return 0;
        -:  715:            
        -:  716:        case smithy:
    #####:  717:            playSmithy(handPos, state);
call    0 never executed
    #####:  718:            return 0;
        -:  719:            
        -:  720:        case village:
    #####:  721:            playVillage(handPos, state);
call    0 never executed
    #####:  722:            return 0;
        -:  723:            
        -:  724:        case baron:
    #####:  725:            state->numBuys++;//Increase buys by 1!
    #####:  726:            if (choice1 > 0) {//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  727:                int p = 0;//Iterator for hand!
    #####:  728:                int card_not_discarded = 1;//Flag for discard set!
    #####:  729:                while (card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  730:                    if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  731:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  732:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  733:                        state->discardCount[currentPlayer]++;
    #####:  734:                        for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  735:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  736:                        }
    #####:  737:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  738:                        state->handCount[currentPlayer]--;
    #####:  739:                        card_not_discarded = 0;//Exit the loop
    #####:  740:                    } else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  741:                        if (DEBUG) {
        -:  742:                            printf("No estate cards in your hand, invalid choice\n");
        -:  743:                            printf("Must gain an estate if there are any\n");
        -:  744:                        }
    #####:  745:                        if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  746:                            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  747:                            state->supplyCount[estate]--;//Decrement estates
    #####:  748:                            if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  749:                                isGameOver(state);
call    0 never executed
        -:  750:                            }
        -:  751:                        }
    #####:  752:                        card_not_discarded = 0;//Exit the loop
        -:  753:                    } else {
    #####:  754:                        p++;//Next card
        -:  755:                    }
        -:  756:                }
        -:  757:            } else {
    #####:  758:                if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  759:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  760:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  761:                    if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  762:                        isGameOver(state);
call    0 never executed
        -:  763:                    }
        -:  764:                }
        -:  765:            }
        -:  766:            
        -:  767:            
    #####:  768:            return 0;
        -:  769:            
        -:  770:        case great_hall:
    #####:  771:            playGreatHall(handPos, state);
call    0 never executed
    #####:  772:            return 0;
        -:  773:            
        -:  774:        case minion:
        -:  775:            
    #####:  776:            state->numActions++;
        -:  777:            
        -:  778:            
    #####:  779:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  780:            
    #####:  781:            if (choice1)        //+2 coins
branch  0 never executed
branch  1 never executed
        -:  782:            {
    #####:  783:                state->coins = state->coins + 2;
    #####:  784:            } else if (choice2)        //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  785:            {
        -:  786:                
    #####:  787:                while (numHandCards(state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  788:                    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  789:                }
        -:  790:                
        -:  791:                
    #####:  792:                for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  793:                    drawCard(currentPlayer, state);
call    0 never executed
        -:  794:                }
        -:  795:                
        -:  796:                
    #####:  797:                for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  798:                    if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  799:                        if (state->handCount[i] > 4) {
branch  0 never executed
branch  1 never executed
        -:  800:                            
    #####:  801:                            while (state->handCount[i] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  802:                                discardCard(handPos, i, state, 0);
call    0 never executed
        -:  803:                            }
        -:  804:                            
        -:  805:                            
    #####:  806:                            for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####:  807:                                drawCard(i, state);
call    0 never executed
        -:  808:                            }
        -:  809:                        }
        -:  810:                    }
        -:  811:                }
        -:  812:                
        -:  813:            }
    #####:  814:            return 0;
        -:  815:            
        -:  816:        case steward:
    #####:  817:            if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  818:                
    #####:  819:                drawCard(currentPlayer, state);
call    0 never executed
    #####:  820:                drawCard(currentPlayer, state);
call    0 never executed
    #####:  821:            } else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  822:                
    #####:  823:                state->coins = state->coins + 2;
        -:  824:            } else {
        -:  825:                
    #####:  826:                discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  827:                discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  828:            }
        -:  829:            
        -:  830:            
    #####:  831:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  832:            return 0;
        -:  833:            
        -:  834:        case tribute:
    #####:  835:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  836:                if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  837:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  838:                    state->deckCount[nextPlayer]--;
    #####:  839:                } else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  840:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  841:                    state->discardCount[nextPlayer]--;
        -:  842:                } else {
        -:  843:                    
        -:  844:                    if (DEBUG) {
        -:  845:                        printf("No cards to reveal\n");
        -:  846:                    }
        -:  847:                }
        -:  848:            } else {
    #####:  849:                if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  850:                    for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  851:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  852:                        state->deckCount[nextPlayer]++;
    #####:  853:                        state->discard[nextPlayer][i] = -1;
    #####:  854:                        state->discardCount[nextPlayer]--;
        -:  855:                    }
        -:  856:                    
    #####:  857:                    shuffle(nextPlayer, state);//Shuffle the deck
call    0 never executed
        -:  858:                }
    #####:  859:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  860:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  861:                state->deckCount[nextPlayer]--;
    #####:  862:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  863:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  864:                state->deckCount[nextPlayer]--;
        -:  865:            }
        -:  866:            
    #####:  867:            if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  868:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  869:                state->playedCardCount++;
    #####:  870:                tributeRevealedCards[1] = -1;
        -:  871:            }
        -:  872:            
    #####:  873:            for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  874:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  875:                    tributeRevealedCards[i] == gold) {//Treasure cards
    #####:  876:                    state->coins += 2;
    #####:  877:                } else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  878:                           tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  879:                           tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####:  880:                    drawCard(currentPlayer, state);
call    0 never executed
    #####:  881:                    drawCard(currentPlayer, state);
call    0 never executed
        -:  882:                } else {//Action Card
    #####:  883:                    state->numActions = state->numActions + 2;
        -:  884:                }
        -:  885:            }
        -:  886:            
    #####:  887:            return 0;
        -:  888:            
        -:  889:        case ambassador:
    #####:  890:            j = 0;        //used to check if player has enough cards to discard
        -:  891:            
    #####:  892:            if (choice2 > 2 || choice2 < 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  893:                return -1;
        -:  894:            }
        -:  895:            
    #####:  896:            if (choice1 == handPos) {
branch  0 never executed
branch  1 never executed
    #####:  897:                return -1;
        -:  898:            }
        -:  899:            
    #####:  900:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  901:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  902:                    j++;
        -:  903:                }
        -:  904:            }
    #####:  905:            if (j < choice2) {
branch  0 never executed
branch  1 never executed
    #####:  906:                return -1;
        -:  907:            }
        -:  908:            
        -:  909:            if (DEBUG)
        -:  910:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  911:            
        -:  912:            
    #####:  913:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  914:            
        -:  915:            
    #####:  916:            for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  917:                if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  918:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  919:                }
        -:  920:            }
        -:  921:            
        -:  922:            
    #####:  923:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  924:            
        -:  925:            
    #####:  926:            for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####:  927:                for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  928:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####:  929:                        discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  930:                        break;
        -:  931:                    }
        -:  932:                }
        -:  933:            }
        -:  934:            
    #####:  935:            return 0;
        -:  936:            
        -:  937:        case cutpurse:
        -:  938:            
    #####:  939:            updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  940:            for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  941:                if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  942:                    for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  943:                        if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  944:                            discardCard(j, i, state, 0);
call    0 never executed
    #####:  945:                            break;
        -:  946:                        }
    #####:  947:                        if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  948:                            for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  949:                                if (DEBUG)
        -:  950:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  951:                            }
    #####:  952:                            break;
        -:  953:                        }
        -:  954:                    }
        -:  955:                    
        -:  956:                }
        -:  957:                
        -:  958:            }
        -:  959:            
        -:  960:            
    #####:  961:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  962:            
    #####:  963:            return 0;
        -:  964:            
        -:  965:            
        -:  966:        case embargo:
        -:  967:            
    #####:  968:            state->coins = state->coins + 2;
        -:  969:            
        -:  970:            
    #####:  971:            if (state->supplyCount[choice1] == -1) {
branch  0 never executed
branch  1 never executed
    #####:  972:                return -1;
        -:  973:            }
        -:  974:            
        -:  975:            
    #####:  976:            state->embargoTokens[choice1]++;
        -:  977:            
        -:  978:            
    #####:  979:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  980:            return 0;
        -:  981:            
        -:  982:        case outpost:
        -:  983:            
    #####:  984:            state->outpostPlayed++;
        -:  985:            
        -:  986:            
    #####:  987:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  988:            return 0;
        -:  989:            
        -:  990:        case salvager:
        -:  991:            
    #####:  992:            state->numBuys++;
        -:  993:            
    #####:  994:            if (choice1) {
branch  0 never executed
branch  1 never executed
        -:  995:                
    #####:  996:                state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -:  997:                
    #####:  998:                discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  999:            }
        -: 1000:            
        -: 1001:            
    #####: 1002:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1003:            return 0;
        -: 1004:            
        -: 1005:        case sea_hag:
    #####: 1006:            for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1007:                if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1008:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1009:                    state->deckCount[i]--;
    #####: 1010:                    state->discardCount[i]++;
    #####: 1011:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1012:                }
        -: 1013:            }
    #####: 1014:            return 0;
        -: 1015:            
        -: 1016:        case treasure_map:
        -: 1017:            
    #####: 1018:            index = -1;
    #####: 1019:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1020:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1021:                    index = i;
    #####: 1022:                    break;
        -: 1023:                }
        -: 1024:            }
    #####: 1025:            if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1026:                
    #####: 1027:                discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1028:                discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1029:                
        -: 1030:                
    #####: 1031:                for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1032:                    gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1033:                }
        -: 1034:                
        -: 1035:                
    #####: 1036:                return 1;
        -: 1037:            }
        -: 1038:            
        -: 1039:            
    #####: 1040:            return -1;
        -: 1041:    }
        -: 1042:    
    #####: 1043:    return -1;
        -: 1044:}
        -: 1045:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1046:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1047:    
        -: 1048:    
    #####: 1049:    if (trashFlag < 1) {
branch  0 never executed
branch  1 never executed
        -: 1050:        
    #####: 1051:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1052:        state->playedCardCount++;
        -: 1053:    }
        -: 1054:    
        -: 1055:    
    #####: 1056:    state->hand[currentPlayer][handPos] = -1;
        -: 1057:    
        -: 1058:    
    #####: 1059:    if (handPos == (state->handCount[currentPlayer] - 1))    //last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1060:    {
        -: 1061:        
    #####: 1062:        state->handCount[currentPlayer]--;
    #####: 1063:    } else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1064:    {
        -: 1065:        
    #####: 1066:        state->handCount[currentPlayer]--;
        -: 1067:    } else {
        -: 1068:        
    #####: 1069:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1070:        
    #####: 1071:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1072:        
    #####: 1073:        state->handCount[currentPlayer]--;
        -: 1074:    }
        -: 1075:    
    #####: 1076:    return 0;
        -: 1077:}
        -: 1078:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1079:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1080:    
    #####: 1081:    if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1082:        return -1;
        -: 1083:    }
        -: 1084:    
        -: 1085:    
        -: 1086:    
    #####: 1087:    if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1088:        state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1089:        state->deckCount[player]++;
    #####: 1090:    } else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1091:        state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1092:        state->handCount[player]++;
        -: 1093:    } else {
    #####: 1094:        state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1095:        state->discardCount[player]++;
        -: 1096:    }
        -: 1097:    
        -: 1098:    
    #####: 1099:    state->supplyCount[supplyPos]--;
        -: 1100:    
    #####: 1101:    return 0;
        -: 1102:}
        -: 1103:
function updateCoins called 22 returned 100% blocks executed 82%
       22: 1104:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1105:    int i;
        -: 1106:    
        -: 1107:    
       22: 1108:    state->coins = 0;
        -: 1109:    
        -: 1110:    
      132: 1111:    for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      110: 1112:        if (state->hand[player][i] == copper) {
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
       75: 1113:            state->coins += 1;
       35: 1114:        } else if (state->hand[player][i] == silver) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1115:            state->coins += 2;
       35: 1116:        } else if (state->hand[player][i] == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1117:            state->coins += 3;
        -: 1118:        }
        -: 1119:    }
        -: 1120:    
        -: 1121:    
       22: 1122:    state->coins += bonus;
        -: 1123:    
       22: 1124:    return 0;
        -: 1125:}
        -: 1126:
function playAdventurer called 50 returned 100% blocks executed 93%
       50: 1127:void playAdventurer(struct gameState *state) {
       50: 1128:	int z = 0;
       50: 1129:	int drawntreasure=0;
       50: 1130:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1131:	int temphand[MAX_HAND]; 
    13804: 1132:   while (drawntreasure < 2) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1133:        
    13704: 1134:        if (state->deckCount[currentPlayer] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1135:            shuffle(currentPlayer, state);
call    0 never executed
        -: 1136:        
    13704: 1137:        drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1138:        
        -: 1139:        
    13704: 1140:        int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
        -: 1141:        
    13704: 1142:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      100: 1143:            drawntreasure++;
        -: 1144:        else {
    13604: 1145:            temphand[z] = cardDrawn;
        -: 1146:            
    13604: 1147:            state->handCount[currentPlayer]--;
    13604: 1148:            z++;
        -: 1149:        }
        -: 1150:    }
     6939: 1151:    while (z-- >= 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1152:        
     6839: 1153:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];
     6839: 1154:        z = z - 1;
        -: 1155:    }
       50: 1156:}
        -: 1157:
function playSmithy called 0 returned 0% blocks executed 0%
    #####: 1158:void playSmithy(int handPos,  struct gameState *state) {
        -: 1159:    
        -: 1160:    int i;
    #####: 1161:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1162:    for (i = 0; i <= 3; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1163:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1164:    }
        -: 1165:    
        -: 1166:    
    #####: 1167:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1168:}
        -: 1169:
function playVillage called 0 returned 0% blocks executed 0%
    #####: 1170:void playVillage(int handPos, struct gameState *state) {
    #####: 1171:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1172:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1173:    
        -: 1174:    
    #####: 1175:    state->numActions = state->numActions + 22;
        -: 1176:    
        -: 1177:    
    #####: 1178:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1179:}
        -: 1180:
function playGreatHall called 0 returned 0% blocks executed 0%
    #####: 1181:void playGreatHall(int handPos, struct gameState *state) {
    #####: 1182:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1183:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1184:    
        -: 1185:    
    #####: 1186:    state->numActions++;
        -: 1187:    
        -: 1188:    
    #####: 1189:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1190:}
        -: 1191:
function playCouncilRoom called 0 returned 0% blocks executed 0%
    #####: 1192:void playCouncilRoom(int handPos, struct gameState *state) {
        -: 1193:    int i;
    #####: 1194:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1195:    
    #####: 1196:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
    #####: 1197:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1198:    
        -: 1199:    
    #####: 1200:    state->numBuys++;
        -: 1201:    
        -: 1202:    
    #####: 1203:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1204:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
    #####: 1205:            drawCard(i, state);
call    0 never executed
        -: 1206:    }
        -: 1207:    
        -: 1208:    
    #####: 1209:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:}
        -: 1211:
        -: 1212:
