        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include "assert.h"
        -:    7:
        6:    8:void ASSERT(int test) {
        6:    9:    if (test) {
        6:   10:        printf ("TEST PASSED!\n");
        -:   11:
        -:   12:    }
        -:   13:    else{
    #####:   14:        printf("TEST FAILED!\n");
        -:   15:
        -:   16:    }
        6:   17:}
        -:   18:
        1:   19:int main () {
        1:   20:    printf("\n*************Starting Card Test 2: Smithy**************\n");
        -:   21:
        -:   22:
        -:   23:    int opponentHandCount,opponentDeckCount, numActions, handCount, deckCount, seed;
        -:   24:    struct gameState GameState;
        1:   25:    int k[10] = {minion, smithy, gardens, tribute, baron, adventurer, cutpurse, mine, embargo, outpost};
        1:   26:    seed = 10;
        1:   27:    initializeGame(2, k, seed, &GameState);
        -:   28:
        -:   29:
        1:   30:    GameState.whoseTurn = 1;
        1:   31:    GameState.hand[1][0] = smithy;
        1:   32:    GameState.deckCount[1] = 3;
        1:   33:    opponentDeckCount = GameState.deckCount[1];
        1:   34:    opponentHandCount = GameState.handCount[1];
        -:   35:
        1:   36:    GameState.whoseTurn = 0;
        -:   37:
        1:   38:    GameState.hand[0][0] = smithy;
        -:   39:
        1:   40:    GameState.deckCount[0] = 3;
        -:   41:
        -:   42:
        -:   43:
        1:   44:    numActions = GameState.numActions;
        1:   45:    deckCount = GameState.deckCount[0];
        1:   46:    handCount = GameState.handCount[0];
        -:   47:
        1:   48:    int cardReturnValue =  cardEffect(smithy, 1, 1, 1, &GameState, handCount, NULL);
        -:   49:
        1:   50:        printf("**Should +3 cards to the players hand:\n");
        1:   51:     ASSERT(handCount - 1 + 3 == GameState.handCount[0]);
        1:   52:        printf("\n**Number of actions remained the same\n");
        1:   53:     ASSERT(numActions == GameState.numActions);
        1:   54:        printf("\n**Deck size was increased by 3:\n");
        1:   55:     ASSERT(deckCount - 3 == GameState.deckCount[0]);
        1:   56:        printf("\n**Opponent's hand size was not changed:\n");
        1:   57:     ASSERT(opponentHandCount == GameState.handCount[1]);
        1:   58:        printf("\n**Oppenent's deck size was not altered:\n");
        1:   59:     ASSERT(opponentDeckCount == GameState.deckCount[1]);
        1:   60:        printf("\n**Card returned from cardEffect with the correct value of 0:\n");
        1:   61:     ASSERT(cardReturnValue == 0);
        -:   62:
        -:   63:}
        -:   64:
